************************
Gizmo Options Object API
************************

**Last Updated:** May 25, 2015

This article provides explanations of each of the Gizmo Options Objects available for configuring Gizmos. It also provide code and usage examples for each object. For more explanation of Gizmos, see the :doc:`./gizmos` documentation.

Button and Button Group
=======================

.. autoclass:: tethys_gizmos.gizmo_options.Button

.. autoclass:: tethys_gizmos.gizmo_options.ButtonGroup

Date Picker
===========

.. autoclass:: tethys_gizmos.gizmo_options.DatePicker


Range Slider
============

.. autoclass:: tethys_gizmos.gizmo_options.RangeSlider


Select Input
============

.. autoclass:: tethys_gizmos.gizmo_options.SelectInput


Text Input
==========

.. autoclass:: tethys_gizmos.gizmo_options.TextInput


Toggle Switch
=============

.. autoclass:: tethys_gizmos.gizmo_options.ToggleSwitch


Message Box
===========

.. autoclass:: tethys_gizmos.gizmo_options.MessageBox


Table View
==========

.. autoclass:: tethys_gizmos.gizmo_options.TableView

.. _plot-view:

Plot View
=========
.. autoclass:: tethys_gizmos.gizmo_options.PlotView


High Charts Objects
-------------------

Use one of these predefined objects to simplify creation of Highcharts plot objects for the highcharts_plot parameter of Plot View.

.. autoclass:: tethys_gizmos.gizmo_options.HighChartsLinePlot
.. autoclass:: tethys_gizmos.gizmo_options.HighChartsScatterPlot
.. autoclass:: tethys_gizmos.gizmo_options.HighChartsPolarPlot
.. autoclass:: tethys_gizmos.gizmo_options.HighChartsPiePlot
.. autoclass:: tethys_gizmos.gizmo_options.HighChartsBarPlot
.. autoclass:: tethys_gizmos.gizmo_options.HighChartsTimeSeries
.. autoclass:: tethys_gizmos.gizmo_options.HighChartsAreaRange

JavaScript API
--------------

The Highcharts plots can be modified via JavaScript by using jQuery to select the Highcharts div and calling the ``highcharts()`` method on it. This will return the JavaScript object that represents the plot, which can be modified using the `Highcharts API <http://api.highcharts.com/highcharts>`_.

::

    var plot = $('#my-plot').highcharts();


.. _map-view:

Map View
========

.. autoclass:: tethys_gizmos.gizmo_options.MapView

Secondary
---------

.. autoclass:: tethys_gizmos.gizmo_options.MVLayer
.. autoclass:: tethys_gizmos.gizmo_options.MVLegendClass
.. autoclass:: tethys_gizmos.gizmo_options.MVDraw
.. autoclass:: tethys_gizmos.gizmo_options.MVView

JavaScript API
--------------

For advanced features, the JavaScript API can be used to interact with the OpenLayers map object that is generated by the Map View JavaScript library.

TETHYS_MAP_VIEW.getMap()
++++++++++++++++++++++++

This method returns the OpenLayers map object. You can use the `OpenLayers Map API <http://openlayers.org/en/v3.5.0/apidoc/ol.Map.html>`_ to perform operations on this object such as adding layers and custom controls.

::

    var ol_map = TETHYS_MAP_VIEW.map;
    ol_map.addLayer(...);
    ol_map.setView(...);

Google Map View
===============

.. autoclass:: tethys_gizmos.gizmo_options.GoogleMapView

JavaScript API
--------------

For advanced features, the JavaScript API can be used to interact with the editable map. If you need capabilities beyond the scope of this API, we recommend using the Google Maps version 3 API to create your own map.

TETHYS_GOOGLE_MAP_VIEW.getMap()
+++++++++++++++++++++++++++++++

This method returns the Google Map object for direct manipulation through JavaScript.

TETHYS_GOOGLE_MAP_VIEW.getGeoJson()
+++++++++++++++++++++++++++++++++++

This method returns the GeoJSON object representing all of the overlays on the map.

TETHYS_GOOGLE_MAP_VIEW.getGeoJsonString()
+++++++++++++++++++++++++++++++++++++++++

This method returns a stringified GeoJSON object representing all of the overlays on the map.

TETHYS_GOOGLE_MAP_VIEW.getWktJson()
+++++++++++++++++++++++++++++++++++

This method returns a Well Known Text JSON object representing all of the overlays on the map.

TETHYS_GOOGLE_MAP_VIEW.getWktJsonString()
+++++++++++++++++++++++++++++++++++++++++

This method returns a stringified Well Known Text JSON object representing all of the overlays on the map.

TETHYS_GOOGLE_MAP_VIEW.swapKmlService(kml_service)
++++++++++++++++++++++++++++++++++++++++++++++++++

Use this method to swap out the current reference kml layers for new ones.

* **kml_service** *(string)* = URL endpoint that returns a JSON object with a property called 'kml_link' that is an array of publicly accessible URLs to kml or kmz documents

TETHYS_GOOGLE_MAP_VIEW.swapOverlayService(overlay_service, clear_overlays)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Use this method to add new overlays to the map dynamically without reloading the page.

* **overlay_service** *(string)* = URL endpoint that returns a JSON object with a property called 'overlay_json' that has a value of a WKT or GeoJSON object in the same format as is used for input_overlays
* **clear_overlays** *(boolean)* = if true, will clear all overlays from the map prior to adding the new overlays. Otherwise all overlays will be retained.


Fetch Climate Map
=================

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimateMap

Secondary
---------

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimateURLParameter

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimateMapData

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimateMapParameters

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimatePlotParameters

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimateVariableParameters

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimateGridParameters

.. autoclass:: tethys_gizmos.gizmo_options.FetchClimatePointParameters

JavaScript API
--------------

For advanced features, the JavaScript API can be used to get the data once the request is complete.

*This is also available if you use the plot feature. To use it, replace all 'date' or 'DATE' in the names with 'plot' or 'PLOT' (except for 'fcDataRequestComplete' or 'fcOneDataRequestComplete').*

FETCHCLIMATE_DATA.getAllData()
++++++++++++++++++++++++++++++

ONCE THE AJAX CALLS ARE COMPLETE - This method returns an object with the initial key level as the variable names and the next level as the grid/point names with the data inside of the grid name key. However, if the AJAX calls are not complete, it returns -1.

**How to know when the AJAX calls are complete? - The Event Listener**

When *ALL* requests are complete - 'e.detail' contains all of the data returned from the AJAX calls:

::

    //The Entire Request Complete Event Listener</p>
    jQuery('#fetchclimate_data')[0].addEventListener('fcDataRequestComplete', function(e) {
        console.log(e.detail);
    });

When *ONE* of the requests is complete - 'e.detail' contains all of the data returned from the AJAX calls:

::

    //The Single Request Complete Event Listener</p>
    jQuery('#fetchclimate_data')[0].addEventListener('fcOneDataRequestComplete', function(e) {
        console.log(e.detail);
    });

Jobs Table
==========

.. autoclass:: tethys_gizmos.gizmo_options.JobsTable