# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-17 13:42
from django.db import migrations, models
import django.db.models.deletion
import tethys_compute.graveyard


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tethys_services', '0001_initial_20'),
    ]

    operations = [
        migrations.CreateModel(
            name='TethysApp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('package', models.CharField(default='', max_length=200, unique=True)),
                ('name', models.CharField(default='', max_length=200)),
                ('description', models.TextField(blank=True, default='', max_length=1000)),
                ('enable_feedback', models.BooleanField(default=False)),
                ('feedback_emails', tethys_compute.graveyard.ListField(blank=True, default='')),
                ('index', models.CharField(default='', max_length=200)),
                ('icon', models.CharField(default='', max_length=200)),
                ('root_url', models.CharField(default='', max_length=200)),
                ('color', models.CharField(default='', max_length=10)),
                ('enabled', models.BooleanField(default=True)),
                ('show_in_apps_library', models.BooleanField(default=True)),
                ('tags', models.CharField(blank=True, default='', max_length=200)),
            ],
            options={
                'verbose_name': 'Tethys App',
                'verbose_name_plural': 'Installed Apps',
                'permissions': (('view_app', 'Can see app in library'), ('access_app', 'Can access app')),
            },
        ),
        migrations.CreateModel(
            name='TethysAppSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=200)),
                ('description', models.TextField(blank=True, default='', max_length=1000)),
                ('required', models.BooleanField(default=True)),
                ('initializer', models.CharField(default='', max_length=1000)),
                ('initialized', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomSetting',
            fields=[
                ('tethysappsetting_ptr', models.OneToOneField(auto_created=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              parent_link=True, primary_key=True, serialize=False,
                                                              to='tethys_apps.TethysAppSetting')),
                ('value', models.CharField(blank=True, max_length=1024)),
                ('type', models.CharField(choices=[('STRING', 'String'), ('INTEGER', 'Integer'), ('FLOAT', 'Float'),
                                                   ('BOOLEAN', 'Boolean')], default='STRING', max_length=200)),
            ],
            bases=('tethys_apps.tethysappsetting',),
        ),
        migrations.CreateModel(
            name='DatasetServiceSetting',
            fields=[
                ('tethysappsetting_ptr', models.OneToOneField(auto_created=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              parent_link=True, primary_key=True,
                                                              serialize=False, to='tethys_apps.TethysAppSetting')),
                ('engine', models.CharField(choices=[('tethys_dataset_services.engines.CkanDatasetEngine', 'CKAN'),
                                                     ('tethys_dataset_services.engines.HydroShareDatasetEngine',
                                                      'HydroShare')],
                                            default='tethys_dataset_services.engines.CkanDatasetEngine',
                                            max_length=200)),
                ('dataset_service', models.ForeignKey(blank=True, null=True,
                                                      on_delete=django.db.models.deletion.CASCADE,
                                                      to='tethys_services.DatasetService')),
            ],
            bases=('tethys_apps.tethysappsetting',),
        ),
        migrations.CreateModel(
            name='PersistentStoreConnectionSetting',
            fields=[
                ('tethysappsetting_ptr', models.OneToOneField(auto_created=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              parent_link=True, primary_key=True, serialize=False,
                                                              to='tethys_apps.TethysAppSetting')),
                ('persistent_store_service', models.ForeignKey(blank=True, null=True,
                                                               on_delete=django.db.models.deletion.CASCADE,
                                                               to='tethys_services.PersistentStoreService')),
            ],
            bases=('tethys_apps.tethysappsetting',),
        ),
        migrations.CreateModel(
            name='PersistentStoreDatabaseSetting',
            fields=[
                ('tethysappsetting_ptr', models.OneToOneField(auto_created=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              parent_link=True, primary_key=True, serialize=False,
                                                              to='tethys_apps.TethysAppSetting')),
                ('spatial', models.BooleanField(default=False)),
                ('dynamic', models.BooleanField(default=False)),
                ('persistent_store_service', models.ForeignKey(blank=True, null=True,
                                                               on_delete=django.db.models.deletion.CASCADE,
                                                               to='tethys_services.PersistentStoreService')),
            ],
            bases=('tethys_apps.tethysappsetting',),
        ),
        migrations.CreateModel(
            name='SpatialDatasetServiceSetting',
            fields=[
                ('tethysappsetting_ptr', models.OneToOneField(auto_created=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              parent_link=True, primary_key=True, serialize=False,
                                                              to='tethys_apps.TethysAppSetting')),
                ('engine', models.CharField(choices=[('tethys_dataset_services.engines.GeoServerSpatialDatasetEngine',
                                                      'GeoServer')],
                                            default='tethys_dataset_services.engines.GeoServerSpatialDatasetEngine',
                                            max_length=200)),
                ('spatial_dataset_service', models.ForeignKey(blank=True, null=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              to='tethys_services.SpatialDatasetService')),
            ],
            bases=('tethys_apps.tethysappsetting',),
        ),
        migrations.CreateModel(
            name='WebProcessingServiceSetting',
            fields=[
                ('tethysappsetting_ptr', models.OneToOneField(auto_created=True,
                                                              on_delete=django.db.models.deletion.CASCADE,
                                                              parent_link=True, primary_key=True, serialize=False,
                                                              to='tethys_apps.TethysAppSetting')),
                ('web_processing_service', models.ForeignKey(blank=True, null=True,
                                                             on_delete=django.db.models.deletion.CASCADE,
                                                             to='tethys_services.WebProcessingService')),
            ],
            bases=('tethys_apps.tethysappsetting',),
        ),
        migrations.AddField(
            model_name='tethysappsetting',
            name='tethys_app',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='settings_set',
                                    to='tethys_apps.TethysApp'),
        ),
    ]
