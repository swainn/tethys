"""
Settings for Tethys Platform

This file contains default Django and other settings for the Tethys Platform.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

from django.contrib.messages import constants as message_constants

BASE_DIR = os.path.dirname(__file__)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '{{ secret_key }}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = {% if production %}False{% else %}True{% endif %}

{% if allowed_hosts %}
ALLOWED_HOSTS = {{ allowed_hosts }}
{% endif %}

# List those who should be notified of an error when DEBUG = False as a tuple of (name, email address).
# i.e.: ADMINS = [('John', 'john@example.com'), ('Mary', 'mary@example.com')]
ADMINS = []

# Force user logout once the browser has been closed.
# If changed, delete all django_session table entries from the tethys_default database to ensure updated behavior
SESSION_EXPIRE_AT_BROWSER_CLOSE = {{ session_expire_browser }}
{% if not session_expire_browser %}
SESSION_SECURITY_INSECURE = True
{% endif %}
# Warn user of forced logout after indicated number of seconds
SESSION_SECURITY_WARN_AFTER = {{ session_warning }}

# Force user logout after a certain number of seconds
SESSION_SECURITY_EXPIRE_AFTER = {{ session_expire }}

# See https://docs.djangoproject.com/en/1.8/topics/logging/#configuring-logging for more logging configuration options.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s:%(name)s:%(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console_simple': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'console_verbose': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console_simple'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'WARNING'),
        },
        'tethys': {
            'handlers': ['console_verbose'],
            'level': 'INFO',
        }
    },
}

# Application definition

INSTALLED_APPS = [
{%- for item in installed_apps %}
    '{{ item }}',
{%- endfor %}
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'tethys_portal.middleware.TethysSocialAuthExceptionMiddleware',
    'session_security.middleware.SessionSecurityMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    )
}

AUTHENTICATION_BACKENDS = [
{%- for item in backends %}
    '{{ item }}',
{%- endfor %}
]

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]

# Terms and conditions settings
ACCEPT_TERMS_PATH = '/terms/accept/'
TERMS_EXCLUDE_URL_PREFIX_LIST = {'/admin/', '/oauth2/', '/handoff/', '/accounts/', '/terms/'}
TERMS_EXCLUDE_URL_LIST = {'/'}
TERMS_BASE_TEMPLATE = 'page.html'

ROOT_URLCONF = 'tethys_portal.urls'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ db_name }}',
        'USER': '{{ db_username }}',
        'PASSWORD': '{{ db_password }}',
        'HOST': '{{ db_host }}',
        'PORT': '{{ db_port }}',
        {% if not production %}'DIR': '{{ db_dir }}',{% endif %}
    }
}

# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'tethys_config.context_processors.tethys_global_settings_context',
                'tethys_apps.context_processors.tethys_apps_context',
                'tethys_gizmos.context_processors.tethys_gizmos_context'
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'tethys_apps.template_loaders.TethysTemplateLoader'
            ],
            'debug': DEBUG
        }
    }
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'tethys_apps.static_finders.TethysStaticFinder'
]

# Uncomment the next line for production installation
{% if not production %}#{% endif %}STATIC_ROOT = '{{ static_root }}'

# Tethys Workspaces
{% if not production %}#{% endif %}TETHYS_WORKSPACES_ROOT = '{{ workspaces_root }}'

# Messaging settings
MESSAGE_TAGS = {message_constants.DEBUG: 'alert-danger',
                message_constants.INFO: 'alert-info',
                message_constants.SUCCESS: 'alert-success',
                message_constants.WARNING: 'alert-warning',
                message_constants.ERROR: 'alert-danger'}

# Gravatar Settings
GRAVATAR_URL = 'http://www.gravatar.com/'
GRAVATAR_SECURE_URL = 'https://secure.gravatar.com/'
GRAVATAR_DEFAULT_SIZE = '80'
GRAVATAR_DEFAULT_IMAGE = 'retro'
GRAVATAR_DEFAULT_RATING = 'g'
GRAVATAR_DFFAULT_SECURE = True



# Use this setting to bypass the home page
BYPASS_TETHYS_HOME_PAGE = {{ bypass_portal_home }}

# Use this setting to disable open account signup
ENABLE_OPEN_SIGNUP = {{ open_signup }}

# Set to True to allow Open Portal mode.
ENABLE_OPEN_PORTAL = {{ open_portal }}

# Uncomment the following lines and adjust to match your setup to enable emailing capabilities
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
#EMAIL_HOST = 'localhost'
#EMAIL_PORT = 25
#EMAIL_HOST_USER = ''
#EMAIL_HOST_PASSWORD = ''
#EMAIL_USE_TLS = False
#DEFAULT_FROM_EMAIL = 'Example <noreply@exmaple.com>'


# OAuth Settings
# http://psa.matiasaguirre.net/docs/configuration/index.html
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']
SOCIAL_AUTH_SLUGIFY_USERNAMES = True
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/apps/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/accounts/login/'

# OAuth Providers
# Google, Facebook, LinkedIn, and HydroShare options available. "tethys gen settings --help" for more info
{%- for key, value in oauth_options.items() %}
{% if value %}
{%- if  key == "SOCIAL_AUTH_FACEBOOK_SCOPE" %}{{ key }} = ['{{ value }}']
{%- else %}{{ key }} = '{{ value }}'{% endif %}
{%- else %}{{ key }} = ''{% endif %}
{%- endfor %}

# Django Guardian Settings
ANONYMOUS_USER_ID = -1
# GUARDIAN_RAISE_403 = False  # Mutually exclusive with GUARDIAN_RENDER_403
# GUARDIAN_RENDER_403 = False  # Mutually exclusive with GUARDIAN_RAISE_403
# GUARDIAN_TEMPLATE_403 = ''
# ANONYMOUS_DEFAULT_USERNAME_VALUE = 'anonymous'

# RESOURCE QUOTAS TO INSTALL
RESOURCE_QUOTA_HANDLERS = [
{%- for item in resource_quota_handlers %}
    '{{ item }}',
{%- endfor %}
]

ENABLE_CAPTCHA = {{ captcha }}

# Django-recaptcha
RECAPTCHA_PRIVATE_KEY = {% if recaptcha_private_key %}'{{ recaptcha_private_key }}'{% else %}''{% endif %}
RECAPTCHA_PUBLIC_KEY = {% if recaptcha_public_key %}'{{ recaptcha_public_key }}'{% else %}''{% endif %}
# If you require reCaptcha to be loaded from somewhere other than https://google.com
# (e.g. to bypass firewall restrictions), you can specify what proxy to use.
# RECAPTCHA_PROXY_HOST = 'https://recaptcha.net'

# Placeholders for the ID's required by various web-analytics services supported by Django-Analytical.
# Replace False with the tracking ID as a string e.g. SERVICE_ID = 'abcd1234'
{%- for key, value in django_analytical.items() %}
{{ key }} = '{{ value }}'
{%- endfor %}

ASGI_APPLICATION = "tethys_portal.routing.application"

{% if not channel_layer %}# {% endif %}CHANNEL_LAYERS = {
{% if not channel_layer %}# {% endif %}    'default': {
{% if not channel_layer %}# {% endif %}        'BACKEND': '
{%- if channel_layer %}{{ channel_layer }}{% else %}channels.layers.InMemoryChannelLayer{% endif %}'
{% if not channel_layer %}# {% endif %}    },
{% if not channel_layer %}# {% endif %}}
